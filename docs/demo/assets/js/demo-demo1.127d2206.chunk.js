(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{49:function(n,e,d){"use strict";d.r(e),e.default='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>SandBox</title>\n</head>\n<body>\n  <canvas id="glslDoodle" width="512" height="512"></canvas>\n</body>\n</html>'},498:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  vec2 center = vec2(0.5);\n  float d = distance(st, center);\n  gl_FragColor.rgb = d * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},499:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  vec2 center = vec2(0.5);\n  float d = distance(st, center);\n  gl_FragColor.rgb = step(0.25, d) * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},50:function(n,e,d){"use strict";d.r(e),e.default="html,body{\n  margin: 0;\n  padding: 0;\n  background: #151718;\n  height: 100%;\n  width: 100%;\n  display: flex;\n}\ncanvas {\n  margin: auto;\n  border: solid 2px #aaa;\n  background: #fff;\n  max-width: 512px;\n  width: 80%;\n}"},500:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  vec2 center = vec2(0.5);\n  float d = distance(st, center);\n  gl_FragColor.rgb = (1.0 - step(0.25, d)) * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},501:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  vec2 center = vec2(0.5);\n  float d = distance(st, center);\n  gl_FragColor.rgb = (1.0 - smoothstep(0.25, 0.26, d)) * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},502:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy;\n  if(st.x > 256.0) {\n    gl_FragColor = vec4(1.0);\n  } else {\n    gl_FragColor = vec4(0, 0, 0, 1.0);\n  }\n}"},503:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  gl_FragColor.rgb = step(0.5, st.x) * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},504:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  gl_FragColor.rgb = st.x * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},505:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  float d = smoothstep(0.0, 0.3, st.x) - smoothstep(0.7, 1.0, st.x);\n  gl_FragColor.rgb = d * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},506:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nfloat f(float x) {\n  // return sin(x * 2.0 * PI);\n  // return cos(x * 2.0 * PI);\n  // return 2.0 * x;\n  // return 0.1 / (x + 0.02);\n  // return smoothstep(0.1, 0.9, x);\n  return x * x;\n}\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  float x = st.x;\n  float d1 = sdf_line(\n    st, \n    vec2(x - 0.01, f(x - 0.01)), \n    vec2(x, f(x))\n  );\n  float d2 = sdf_line(\n    st, \n    vec2(x, f(x)), \n    vec2(x + 0.01, f(x + 0.01))\n  );\n  float d = min(d1, d2);\n  gl_FragColor.rgb = (step(-0.005, d) - step(0.005, d)) * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},507:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nfloat f(float x) {\n  // return sin(x * 2.0 * PI);\n  // return cos(x * 2.0 * PI);\n  // return 2.0 * x;\n  // return 0.1 / (x + 0.02);\n  // return smoothstep(0.1, 0.9, x);\n  return x * x;\n}\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  st = mix(vec2(-5), vec2(5), st);\n  float d = PLOT(f, st, 0.01);\n  gl_FragColor.rgb = (step(-0.05, d) - step(0.05, d)) * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},508:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nfloat f1(float x) {\n  return x * x;\n}\n\nfloat f2(float x) {\n  return sin(x * 2.0 * PI);\n}\n\nfloat f3(float x) {\n  return smoothstep(0.1, 0.9, x);\n}\n\nfloat f4(float x) {\n  return 0.1 / (x + 0.02);\n}\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  st = mix(vec2(-5), vec2(5), st);\n  float d1 = PLOT(f1, st, 0.01);\n  float d2 = PLOT(f2, st, 0.01);\n  float d3 = PLOT(f3, st, 0.01);\n  float d4 = PLOT(f4, st, 0.01);\n  float d = min(min(min(d1, d2), d3), d4);\n  gl_FragColor.rgb = (step(-0.05, d) - step(0.05, d)) * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},509:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nfloat f1(float x) {\n  return x * x;\n}\n\nfloat f2(float x) {\n  return sin(x * 2.0 * PI);\n}\n\nfloat f3(float x) {\n  return smoothstep(0.1, 0.9, x);\n}\n\nfloat f4(float x) {\n  return 0.1 / (x + 0.02);\n}\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  st = mix(vec2(-5), vec2(5), st);\n  float d1 = PLOT(f1, st, 0.01);\n  float d2 = PLOT(f2, st, 0.01);\n  float d3 = PLOT(f3, st, 0.01);\n  float d4 = PLOT(f4, st, 0.01);\n\n  vec3 color1 = (step(-0.05, d1) - step(0.05, d1)) * vec3(1.0, 0.0, 1.0);\n  vec3 color2 = (step(-0.05, d2) - step(0.05, d2)) * vec3(1.0, 1.0, 0.0);\n  vec3 color3 = (step(-0.05, d3) - step(0.05, d3)) * vec3(0.0, 1.0, 0.0);\n  vec3 color4 = (step(-0.05, d4) - step(0.05, d4)) * vec3(0.0, 1.0, 1.0);\n\n  gl_FragColor.rgb = color1 + color2 + color3 + color4;\n  gl_FragColor.a = 1.0;\n}"},510:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvoid main() {\n  gl_FragColor = vec4(1.0, 0, 0, 1.0);\n}"},511:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 dd_resolution;\n\nfloat line_dist(vec2 p, vec2 l) {\n  float d = cross(vec3(p, 0.0), vec3(l, 0.0)).z / length(l);\n  return abs(d);\n}\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  vec2 line = vec2(0.5);\n  float d = line_dist(st, line);\n  gl_FragColor.rgb = step(0.01, d) * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},512:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  vec2 line = vec2(0.5);\n  float d = sdf_line(st, line);\n  gl_FragColor.rgb = step(0.01, d) * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},513:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  vec2 line = vec2(0.5);\n  float d = sdf_line(st, line);\n  gl_FragColor.rgb = (step(-0.01, d) - step(0.01, d)) * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},514:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <stdlib>\n#pragma include <graph>\n#pragma include <color>\n#pragma include <pattern>\n\nuniform float dd_time;\nuniform vec2 dd_resolution;\nuniform vec2 dd_randseed;\nuniform vec2 dd_randseed0;\n\n// https://thebookofshaders.com/12/\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution.xy;\n  st.x *= dd_resolution.x / dd_resolution.y;\n  \n  vec3 color = vec3(.0);\n\n  // Tile the space\n  vec2 grid = vec2(6.0, 6.0);\n  vec2 i_st = grid_index(st, grid);\n  vec2 f_st = grid_xy(st, grid);\n\n  float m_dist = 1.0;  // minimun distance\n\n  for (int y= -1; y <= 1; y++) {\n    for (int x= -1; x <= 1; x++) {\n      // Neighbor place in the grid\n      vec2 neighbor = vec2(float(x), float(y));\n\n      // Random position from current + neighbor place in the grid\n      vec2 point = random2(i_st + neighbor);\n\n      // Animate the point\n      point = 0.5 + 0.5 * sin(dd_time + 6.2831 * point);\n\n      // Vector between the pixel and the point\n      vec2 diff = neighbor + point - f_st;\n\n      // Distance to the point\n      float dist = length(diff);\n\n      // Keep the closer distance\n      m_dist = min(m_dist, dist);\n    }\n  }\n\n  // Draw the min distance (distance field)\n  color += m_dist;\n\n  // Draw cell center\n  color += 1.0 - step(0.02, m_dist);\n\n  // Draw grid\n  // color.r += step(0.98, f_st.x) + step(0.98, f_st.y);\n\n  // Show isolines\n  // color -= step(.7,abs(sin(27.0*m_dist)))*.5;\n\n  gl_FragColor = vec4(color, 1.0);\n}\n"},515:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <stdlib>\n#pragma include <graph>\n#pragma include <color>\n#pragma include <pattern>\n\nuniform float dd_time;\nuniform vec2 dd_resolution;\nuniform vec2 dd_randseed;\nuniform vec2 dd_randseed0;\n\n// http://www.pouet.net/prod.php?which=57245\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n\n  vec2 r = dd_resolution.xy;\n  float t = dd_time;\n\n  vec3 c;\n  float l, z = t;  \n\n  for(int i = 0; i < 3; i++) {\n    vec2 uv, p = st;\n    uv = p;\n    p -= 0.5;\n    p.x *= r.x / r.y;\n    z += 0.07;\n    l = length(p);\n    uv += p / l * (sin(z) + 1.0) * abs(sin(l * 9.0 - z * 2.0));\n    c[i] = 0.01 / length(abs(mod(uv, 1.0) - 0.5));\n  }\n\n  gl_FragColor = vec4(c/l, t);\n}"},516:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <stdlib>\n#pragma include <graph>\n#pragma include <color>\n#pragma include <pattern>\n\nuniform vec2 dd_resolution;\nuniform vec2 dd_randseed0;\n\nSDF gasket(in vec2 st, in vec2 a, in vec2 b, in vec2 c) {\n  const int count = 5;\n\n  for(int i = 0; i < count; i++) {\n    vec2 ab = mix(a, b, 0.5);\n    vec2 ac = mix(a, c, 0.5);\n    vec2 bc = mix(b, c, 0.5);\n\n    if(sdf_triangle(st, a, ab, ac) >= 0.0) {\n      b = ab;\n      c = ac;\n      continue;\n    }\n    if(sdf_triangle(st, c, ac, bc) >= 0.0) {\n      a = ac;\n      b = bc;\n      continue;\n    }\n    if(sdf_triangle(st, b, bc, ab) >= 0.0) {\n      c = bc;\n      a = ab;\n      continue;\n    }\n    return 0.0;\n  }\n\n  return sdf_triangle(st, a, b, c);\n}\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n\n  vec2 a = vec2(0.1, 0.1);\n  vec2 b = vec2(0.9, 0.1);\n  vec2 c = vec2(0.5, 0.9);\n\n  float d = gasket(st, a, b, c);\n  d = fill(d, 0.2);\n\n  gl_FragColor = vec4(vec3(d), 1.0);\n}"},517:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <stdlib>\n#pragma include <graph>\n#pragma include <color>\n#pragma include <pattern>\n\nuniform vec2 dd_resolution;\nuniform vec2 dd_randseed0;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  // st = polar(st);\n  vec2 grid = vec2(10, 10);\n  vec2 idx = grid_index(st, grid);\n  st = grid_xy(st, grid);\n\n  box2 box = create_box();\n  box = scale(box, center(box), vec2(random(idx, 0.1, 0.9)));\n  st = box_quad(st, box);\n\n  float pct = sdf_rect(st, vec2(0), 1.0, 1.0);\n  color(fill(pct, 0.0), random3(idx + dd_randseed0));\n}"},518:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <stdlib>\n#pragma include <graph>\n#pragma include <color>\n#pragma include <pattern>\n\nuniform vec2 dd_resolution;\nuniform vec2 dd_randseed0;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  float d = juila_set(st, vec2(0.5), 2.5, vec2(-0.8, 0.156), 0.01);\n  gl_FragColor = vec4(vec3(d), 1.0);\n}"},519:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <stdlib>\n#pragma include <graph>\n#pragma include <color>\n#pragma include <pattern>\n\nuniform vec2 dd_resolution;\nuniform vec2 dd_randseed0;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution.xy;\n  st = mix(vec2(-10, -10), vec2(10, 10), st);\n  gl_FragColor = vec4(vec3(mist(st + dd_randseed0)), 1.0);\n}"},520:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <stdlib>\n#pragma include <graph>\n#pragma include <color>\n#pragma include <pattern>\n\nuniform float dd_time;\nuniform vec2 dd_randseed0;\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  st = mix(vec2(-10, -10), vec2(10, 10), st);\n  \n  float d = distance(st, vec2(0));\n  d *= noise(dd_randseed0 + st + dd_time);\n  d = fill(d, 1.0);\n\n  gl_FragColor = vec4(vec3(d), 1.0);\n}"},521:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <stdlib>\n#pragma include <graph>\n#pragma include <color>\n#pragma include <pattern>\n\nuniform vec2 dd_randseed0;\nuniform vec2 dd_resolution;\n\nuniform sampler2D dd_sampler0;\n\nvarying vec2 vTextureCoord;\n\nvoid main() {\n  vec2 st =  gl_FragCoord.xy / dd_resolution.xy;\n  float d = sdf_circle(st, vec2(0.5), 0.5);\n  d = fill(d);\n  if(d > 0.0) {\n    vec2 grid = vec2(4.0, 4.0);\n    vec2 overlaps[4]; \n    grid_overlap(st, grid, overlaps);\n    float d3 = 0.0;\n    for(int i = 0; i < 4; i++) {\n      vec2 st2 = overlaps[i];\n      st2 *= 0.6;\n      // st2 = skew(st2, vec2(0), vec2(1.0, 0.0));\n      st2 = rotate(st2, vec2(0.0), - PI / 3.0);\n      float d2 = shape_hypocycloid(st2, vec2(0), 4);\n      d3 = udf_union(d3, d2);\n    }\n    color(d3, vec3(0.376, 0.337, 0.619));\n  }\n}"},522:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <stdlib>\n#pragma include <graph>\n#pragma include <color>\n#pragma include <pattern>\n\nuniform vec2 dd_resolution;\nuniform vec2 dd_randseed0;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  vec2 grid = vec2(10, 10);\n  vec2 idx = grid_index(st, grid);\n\n  st = grid_xy(st, grid);\n  st = mix(vec2(-10, -10), vec2(10, 10), st);\n  \n  float pct = 1.0;\n\n  if(random(idx + dd_randseed0) > 0.5) {\n    if(grid_odd_row(idx, grid)) {\n      st = scale(st, vec2(-1.0, -1.0));\n    }\n\n    if(grid_odd(idx, grid)) {\n      pct = sdf_triangle(st, vec2(10, -10), vec2(10, 10), vec2(-10, 10));\n    } else {\n      pct = sdf_triangle(st, vec2(-10, -10), vec2(-10, 10), vec2(10, 10));\n    }\n\n    color(fill(pct, 0.05), random3(idx));\n  }\n}"},523:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <stdlib>\n#pragma include <graph>\n#pragma include <color>\n#pragma include <pattern>\n\nuniform vec2 dd_resolution;\nuniform vec2 dd_randseed0;\n\nUDF random_shap(in vec2 st, in vec2 seed) {\n    float num = floor(random(seed) * 8.0);\n    st += num;\n    return shape_star(st)\n        + shape_bud5(st - 1.0)\n        + shape_flower3(st - 2.0)\n        + shape_clover4(st - 3.0)\n        + shape_rhombus(st - 4.0)\n        + shape_gourd(st - 5.0)\n        + shape_apple(st - 6.0)\n        + shape_hexagon(st - 7.0);\n}\n\nvoid main() {\n    vec2 st = gl_FragCoord.xy / dd_resolution.xy;\n    // st = lerp(vec2(-3, -3), vec2(3, 3), st);\n    vec2 grid = vec2(10, 10);\n    vec2 index = grid_index(st, grid);\n    st = grid_xy(st, grid);\n\n    float d = random_shap(st, dd_randseed0 + index);\n    color(d, vec4(1.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0));\n}"},524:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <stdlib>\n#pragma include <graph>\n#pragma include <color>\n#pragma include <pattern>\n\nuniform float dd_time;\nuniform vec2 dd_randseed0;\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  st.x += random(dd_randseed0) + 0.1 * dd_time; \n  gl_FragColor = vec4(hsb2rgb(vec3(mist(st), 1.0, 1.0)),1.0);\n}"},525:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  st = fract(st * 10.0);\n\n  float d = sdf_line(st, vec2(1.0));\n  d = fill(d);\n\n  gl_FragColor.rgb = d * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},526:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  \n  st = fract(st * 5.0);\n  st = abs(mix(vec2(-1), vec2(1), st)); \n\n  float d = sdf_line(st, vec2(1.0));\n  d = step(0.0, d);\n\n  gl_FragColor.rgb = d * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},527:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  st = mix(vec2(-5), vec2(5), st);\n  float d = sdf_circle(st, vec2(0), 0.5);\n  d = stroke(fract(abs(d)), 0.5, 0.1, 0.1);\n  gl_FragColor.rgb = d * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},528:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  vec2 line = vec2(0.5);\n  float d = sdf_line(st, line);\n  d = stroke(d, 0.02);\n  gl_FragColor.rgb = d * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},529:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  vec2 line = vec2(0.5);\n  float d = sdf_line(st, line);\n  d = stroke(abs(d), 0.1, 0.02, 0.1);\n  gl_FragColor.rgb = d * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},530:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n  st = mix(vec2(-5), vec2(5), st);\n  vec2 line = vec2(0.5);\n  float d = sdf_line(st, line);\n  d = stroke(fract(abs(d)), 0.5, 0.1, 0.1);\n  gl_FragColor.rgb = d * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},531:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n\n  vec2 a = vec2(0.2, 0.2);\n  vec2 b = vec2(0.2, 0.7);\n  vec2 c = vec2(0.7, 0.7);\n  vec2 d = vec2(0.7, 0.2);\n\n  float d1 = sdf_line(st, a, b);\n  float d2 = sdf_line(st, b, c);\n  float d3 = sdf_line(st, c, d);\n  float d4 = sdf_line(st, d, a);\n  \n  d1 = step(0.0, d1);\n  d2 = step(0.0, d2);\n  d3 = step(0.0, d3);\n  d4 = step(0.0, d4);\n\n  gl_FragColor.rgb = d1 * d2 * d3 * d4 *vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"},532:function(n,e,d){"use strict";d.r(e),e.default="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#pragma include <graphics>\n\nuniform vec2 dd_resolution;\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / dd_resolution;\n\n  vec2 a = vec2(0.2, 0.3);\n  vec2 b = vec2(0.5, 0.7);\n  vec2 c = vec2(0.7, 0.3);\n\n  float d1 = sdf_line(st, a, b);\n  float d2 = sdf_line(st, b, c);\n  float d3 = sdf_line(st, c, a);\n  \n  d1 = step(0.0, d1);\n  d2 = step(0.0, d2);\n  d3 = step(0.0, d3);\n\n  gl_FragColor.rgb = d1 * d2 * d3 * vec3(1.0);\n  gl_FragColor.a = 1.0;\n}"}}]);